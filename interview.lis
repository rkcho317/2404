     1                                  ;***************************************************************************************************************************
     2                                  ;Program name: "King of Assembly".  This program demonstrates how to pass user inputs to generate different messages                        *
     3                                  ;to an X86 function, and into a C++ main function.   Copyright (C) 2021 Rosa Cho                                                                             *
     4                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     5                                  ;version 3 as published by the Free Software Foundation.                                                                    *
     6                                  ;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *
     7                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
     8                                  ;A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
     9                                  ;****************************************************************************************************************************
    10                                  
    11                                  
    12                                  
    13                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    14                                  
    15                                  ;Author information
    16                                  ;  Author name: Rosa Cho
    17                                  ;  Author email: rkcho317@fullerton.edu
    18                                  ;
    19                                  ;Program information
    20                                  ;  Program name: King of Assembly 
    21                                  ;  Programming languages: Main function in C++; string and char input/output functions in X86-64
    22                                  ;  Date program initiated: 2021-Apr-12
    23                                  ;  Date last updated: 2021-May-16
    24                                  ;  Files in the program: main.cpp, interview.asm, run.sh
    25                                  ;
    26                                  ;Purpose
    27                                  ;
    28                                  ;
    29                                  ;This file
    30                                  ;  File name: interview.asm
    31                                  ;  Language: X86-64
    32                                  ;  Syntax: Intel
    33                                  ;  Assemble: nasm -f elf64 -l interview.lis -o interview.o interview.asm
    34                                  ;
    35                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    36                                  ;
    37                                  ;Author information
    38                                  ;  Author name: Rosa Cho
    39                                  ;  Author email: rkcho317@fullerton.edu
    40                                  ;
    41                                  ;Program information
    42                                  ;  Program name: interview.asm
    43                                  ;  Programming languages: X86 with one module in C++
    44                                  ;  Date program began: 2021-Apr-12
    45                                  ;  Date of last update: 2021-May-16
    46                                  ;
    47                                  ;Purpose
    48                                  ;  The intent of this program is to show some of the basic tools or techniques for working with user inputs of strings (with embedded white space) and chars then output the results to a txt file.
    49                                  ;
    50                                  ;Project information
    51                                  ;  Project files: main.cpp, interview.asm, run.sh
    52                                  ;  Status: Available for public review.
    53                                  ;
    54                                  ;Translator information
    55                                  ;  Linux: nasm -f elf64 -l interview.lis -o interview.o interview.asm
    56                                  ;
    57                                  ;
    58                                  ;
    59                                  ;
    60                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    61                                  ;
    62                                  extern printf
    63                                  extern scanf
    64                                  extern main
    65                                  
    66                                  name_size equ 100
    67                                  
    68                                  global interview
    69                                  
    70                                  segment .data
    71                                  
    72 00000000 48656C6C6F2025732E-     info db "Hello %s. I am Ms Fenster. The interview will begin now.",10,0
    72 00000009 204920616D204D7320-
    72 00000012 46656E737465722E20-
    72 0000001B 54686520696E746572-
    72 00000024 766965772077696C6C-
    72 0000002D 20626567696E206E6F-
    72 00000036 772E0A00           
    73 0000003A 576F77212025352E32-     salary db "Wow! %5.2lf That's a lot of cash.", 10,0
    73 00000043 6C6620546861742773-
    73 0000004C 2061206C6F74206F66-
    73 00000055 20636173682E0A00   
    74 0000005D 57686F20646F20796F-     who db "Who do you think you are, Chris Sawyer (y or n)?: %c", 10,0
    74 00000066 75207468696E6B2079-
    74 0000006F 6F75206172652C2043-
    74 00000078 687269732053617779-
    74 00000081 6572202879206F7220-
    74 0000008A 6E293F3A2025630A00 
    75 00000093 5765726520796F7520-     compy db "Were you a computer science major (y or n)?: %c ",10, 0
    75 0000009C 6120636F6D70757465-
    75 000000A5 7220736369656E6365-
    75 000000AE 206D616A6F72202879-
    75 000000B7 206F72206E293F3A20-
    75 000000C0 2563200A00         
    76 000000C5 416C72696768742E20-     elec1 db "Alright.  Now we will work on your electricity.", 10,0
    76 000000CE 204E6F772077652077-
    76 000000D7 696C6C20776F726B20-
    76 000000E0 6F6E20796F75722065-
    76 000000E9 6C6563747269636974-
    76 000000F2 792E0A00           
    77 000000F6 506C6561736520656E-     res1 db "Please enter the resistance of circuit #1 in ohms: %5.3lf", 10,0
    77 000000FF 746572207468652072-
    77 00000108 6573697374616E6365-
    77 00000111 206F66206369726375-
    77 0000011A 697420233120696E20-
    77 00000123 6F686D733A2025352E-
    77 0000012C 336C660A00         
    78 00000131 576861742069732074-     res2 db "What is the resistance of circuit #2 in ohms: %5.3lf", 10,0
    78 0000013A 686520726573697374-
    78 00000143 616E6365206F662063-
    78 0000014C 697263756974202332-
    78 00000155 20696E206F686D733A-
    78 0000015E 2025352E336C660A00 
    79 00000167 54686520746F74616C-     res3 db "The total resistance is %5.3lf Ohms.", 10,0 
    79 00000170 20726573697374616E-
    79 00000179 63652069732025352E-
    79 00000182 336C66204F686D732E-
    79 0000018B 0A00               
    80 0000018D 5468616E6B20796F75-     thanks db "Thank you. Please follow the exit signs to the front desk.", 10,0
    80 00000196 2E20506C6561736520-
    80 0000019F 666F6C6C6F77207468-
    80 000001A8 652065786974207369-
    80 000001B1 676E7320746F207468-
    80 000001BA 652066726F6E742064-
    80 000001C3 65736B2E0A00       
    81                                  
    82 000001C9 256C6600                resans1 db "%lf",0 ;answer to res1
    83 000001CD 256C6600                resans2 db "%lf",0 ;answer to res2
    84                                  
    85 000001D1 256300                  compyq db "%c",0 ;answer to computer science major question
    86 000001D4 256300                  chrisq db "%c",0 ;answer to the are you chris sawyer question
    87                                  
    88 000001D7 48E17A140E7CF540        compscisal dq 88000.88
    89 000001DF 0000000080842E41        chrissal dq 1000000.00
    90 000001E7 14AE47E17AC09240        socialsal dq 1200.12
    91 000001EF 000000000000F03F        one1 dq 1.0
    92                                  
    93                                  segment .bss
    94                                  
    95                                  
    96                                  segment .text
    97                                  interview:
    98                                  
    99                                  ;Backup registers
   100                                  
   101 00000000 55                      push rbp
   102 00000001 4889E5                  mov rbp, rsp
   103 00000004 57                      push rdi
   104 00000005 56                      push rsi
   105 00000006 52                      push rdx
   106 00000007 51                      push rcx
   107 00000008 4150                    push r8
   108 0000000A 4151                    push r9
   109 0000000C 4152                    push r10
   110 0000000E 4153                    push r11
   111 00000010 4154                    push r12
   112 00000012 4155                    push r13
   113 00000014 4156                    push r14
   114 00000016 4157                    push r15
   115 00000018 53                      push rbx
   116 00000019 9C                      pushf
   117                                  
   118 0000001A 6AFF                    push qword -1
   119                                  
   120                                   ;Move values from cpp to stack
   121 0000001C 4989FF                   mov r15, rdi ;string Name
   122 0000001F F2440F10F8               movsd xmm15, xmm0 ;double Salary
   123                                  
   124                                  ;Print "Hello __ I am Ms Fenster. The Interview will begin" message
   125 00000024 6A00                    push qword 0
   126 00000026 B800000000              mov qword rax,0
   127 0000002B 48BF-                   mov qword rdi, info
   127 0000002D [0000000000000000] 
   128 00000035 4C89FE                  mov qword rsi, r15
   129 00000038 E8(00000000)            call printf
   130 0000003D 58                      pop rax
   131                                  
   132                                  
   133                                  ;Print "wow that's a lot of cash!" with salary
   134 0000003E 6A00                    push qword 0
   135 00000040 B801000000              mov rax, 1
   136 00000045 48BF-                   mov rdi, salary
   136 00000047 [3A00000000000000] 
   137 0000004F F2410F10C7              movsd xmm0, xmm15
   138                                  
   139 00000054 E8(00000000)            call printf 
   140 00000059 58                      pop rax
   141                                  
   142                                  
   143                                  ;Print "Are you Chris Sawyer?" 
   144                                  ;push qword 0
   145                                  ;mov qword rax, 0
   146                                  ;mov rdi, who
   147                                  ;call printf
   148                                  ;pop rax
   149                                  
   150                                  ;Answer the Chris Sawyer Question
   151                                  ;push qword 0
   152                                  ;mov rax,0
   153                                  ;mov rdi, chrisq
   154                                  ;mov rdi, rsp
   155                                  ;call scanf 
   156                                  
   157                                  ;If yes to Chris Sawyer
   158                                  ;cmp rdi, 'y'
   159                                  ;movsd xmm0, [chrissal]
   160                                  ;movsd xmm15, xmm0
   161                                  ;jmp final
   162                                  
   163                                  ;If no to Chris Sawyer
   164                                  ;cmp rdi, 'n'
   165                                  ;jmp major
   166                                  
   167                                  ;===BEGIN ELECTRICITY TEST===
   168                                  ;electricity: 
   169                                  
   170                                  ;Print Message that begins the Electricity Test
   171                                  ;push qword 0
   172                                  ;mov qword rax,0
   173                                  ;mov rdi, elec1
   174                                  ;call printf 
   175                                  ;pop rax
   176                                  
   177                                  ;Print Question 1
   178                                  ;push qword 0
   179                                  ;mov qword rax, 0 
   180                                  ;mov rdi, res1
   181                                  ;call printf 
   182                                  ;pop rax
   183                                  
   184                                  ;Accept Answer for Q1
   185                                  ;mov rax,1 
   186                                  ;mov rdi, rsp
   187                                  ;push qword 0
   188                                  ;mov rsi, rsp
   189                                  ;call scanf
   190                                  ;movsd xmm10, [rsp]
   191                                  ;pop rax
   192                                  
   193                                  ;Print Question 2
   194                                  ;push qword 0
   195                                  ;mov qword rax, 0 
   196                                  ;mov rdi, [res2]
   197                                  ;call printf 
   198                                  ;pop rax
   199                                  
   200                                  ;Accept Answer for Q2
   201                                  ;mov rax,1 
   202                                  ;mov rdi, rsp
   203                                  ;push qword 0
   204                                  ;mov rsi, rsp
   205                                  ;call scanf
   206                                  ;movsd xmm11, [rsp]
   207                                  ;pop rax
   208                                  
   209                                  ;Calculate Total Resistance
   210                                  ;mov rax, 0
   211                                  ;movsd xmm12, xmm10
   212                                  ;movsd xmm1, [one1]
   213                                  ;divsd xmm1, xmm12 ;1/resans1 
   214                                  ;movsd xmm12, xmm1
   215                                  ;movsd xmm2,[one1]
   216                                  ;movsd xmm13, xmm11
   217                                  ;divsd xmm2, xmm13 ;1/resans2
   218                                  ;movsd xmm13, xmm2
   219                                  ;addsd xmm13,xmm12
   220                                  ;movsd xmm3,[one1]
   221                                  ;divsd xmm3, xmm13 ; 1/(1/r1 + 1/r2) = total resistance
   222                                  ;movsd xmm13, xmm3
   223                                  
   224                                  ;Print Total Resistance 
   225                                  ;push qword 0
   226                                  ;mov qword rax,0
   227                                  ;mov rdi, res3
   228                                  ;movsd xmm0, xmm13
   229                                  ;call printf
   230                                  ;pop rax
   231                                  
   232                                  ;== Are you a Computer Science Major Block ==
   233                                  ;major:
   234                                  ;Print Computer Science Major Question
   235                                  ;push qword 0
   236                                  ;mov qword rax, 0
   237                                  ;mov rdi, compy
   238                                  ;call printf
   239                                  ;pop rax
   240                                  
   241                                  ;If yes to Computer science major
   242                                  ;cmp rdi, 'y'
   243                                  ;jmp final
   244                                  
   245                                  ;If no to Computer Science major
   246                                  ;cmp rdi, 'n'
   247                                  ;movsd xmm0, [socialsal]
   248                                  ;movsd xmm15, xmm0
   249                                  ;jmp final
   250                                  
   251                                  
   252                                  
   253                                  ; == FINAL prints a final message and sends a code to the main.cpp == 
   254                                  ;final: 
   255                                  
   256                                  ;Thank you message
   257                                  ;push qword 0
   258                                  ;mov qword rax,0
   259                                  ;mov rdi, thanks
   260                                  ;call printf
   261                                  
   262 0000005A 58                       pop rax
   263                                   ;movsd xmm0,xmm15 ;Sends a code to the main.cpp 
   264 0000005B 9D                       popf                                                 
   265 0000005C 5B                       pop rbx                                                     
   266 0000005D 415F                     pop r15                                                     
   267 0000005F 415E                     pop r14                                                      
   268 00000061 415D                     pop r13                                                      
   269 00000063 415C                     pop r12                                                      
   270 00000065 415B                     pop r11                                                     
   271 00000067 415A                     pop r10                                                     
   272 00000069 4159                     pop r9                                                      
   273 0000006B 4158                     pop r8                                                      
   274 0000006D 59                       pop rcx                                                     
   275 0000006E 5A                       pop rdx                                                     
   276 0000006F 5E                       pop rsi                                                     
   277 00000070 5F                       pop rdi                                                     
   278 00000071 5D                       pop rbp
   279                                  
   280                                  
   281                                     
   282 00000072 C3                      ret
   283                                  
