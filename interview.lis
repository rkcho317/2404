     1                                  ;***************************************************************************************************************************
     2                                  ;Program name: "King of Assembly".  This program demonstrates how to pass user inputs to generate different messages                        *
     3                                  ;to an X86 function, and into a C++ main function.   Copyright (C) 2021 Rosa Cho                                                                             *
     4                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     5                                  ;version 3 as published by the Free Software Foundation.                                                                    *
     6                                  ;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *
     7                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
     8                                  ;A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
     9                                  ;****************************************************************************************************************************
    10                                  
    11                                  
    12                                  
    13                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    14                                  
    15                                  ;Author information
    16                                  ;  Author name: Rosa Cho
    17                                  ;  Author email: rkcho317@fullerton.edu
    18                                  ;
    19                                  ;Program information
    20                                  ;  Program name: King of Assembly 
    21                                  ;  Programming languages: Main function in C++; string and char input/output functions in X86-64
    22                                  ;  Date program initiated: 2021-Apr-12
    23                                  ;  Date last updated: 2021-May-16
    24                                  ;  Files in the program: main.cpp, interview.asm, run.sh
    25                                  ;
    26                                  ;Purpose
    27                                  ;
    28                                  ;
    29                                  ;This file
    30                                  ;  File name: interview.asm
    31                                  ;  Language: X86-64
    32                                  ;  Syntax: Intel
    33                                  ;  Assemble: nasm -f elf64 -l interview.lis -o interview.o interview.asm
    34                                  ;
    35                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    36                                  ;
    37                                  ;Author information
    38                                  ;  Author name: Rosa Cho
    39                                  ;  Author email: rkcho317@fullerton.edu
    40                                  ;
    41                                  ;Program information
    42                                  ;  Program name: interview.asm
    43                                  ;  Programming languages: X86 with one module in C++
    44                                  ;  Date program began: 2021-Apr-12
    45                                  ;  Date of last update: 2021-May-16
    46                                  ;
    47                                  ;Purpose
    48                                  ;  The intent of this program is to show some of the basic tools or techniques for working with user inputs of strings (with embedded white space) and chars then output the results to a txt file.
    49                                  ;
    50                                  ;Project information
    51                                  ;  Project files: main.cpp, interview.asm, run.sh
    52                                  ;  Status: Available for public review.
    53                                  ;
    54                                  ;Translator information
    55                                  ;  Linux: nasm -f elf64 -l interview.lis -o interview.o interview.asm
    56                                  ;
    57                                  ;
    58                                  ;
    59                                  ;
    60                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    61                                  ;
    62                                  extern printf
    63                                  extern scanf
    64                                  
    65                                  global interview
    66                                  
    67                                  segment .data
    68                                  
    69 00000000 48656C6C6F2025732E-     info db "Hello %s. I am Ms Fenster. The interview will begin now.",10,0
    69 00000009 204920616D204D7320-
    69 00000012 46656E737465722E20-
    69 0000001B 54686520696E746572-
    69 00000024 766965772077696C6C-
    69 0000002D 20626567696E206E6F-
    69 00000036 772E0A00           
    70 0000003A 576F77212025352E32-     salary db "Wow! %5.2lf That's a lot of cash.", 10,0
    70 00000043 6C6620546861742773-
    70 0000004C 2061206C6F74206F66-
    70 00000055 20636173682E0A00   
    71 0000005D 57686F20646F20796F-     who db "Who do you think you are, Chris Sawyer (y or n)?: %c", 10,0
    71 00000066 75207468696E6B2079-
    71 0000006F 6F75206172652C2043-
    71 00000078 687269732053617779-
    71 00000081 6572202879206F7220-
    71 0000008A 6E293F3A2025630A00 
    72 00000093 5765726520796F7520-     compy db "Were you a computer science major (y or n)?: %c ",10, 0
    72 0000009C 6120636F6D70757465-
    72 000000A5 7220736369656E6365-
    72 000000AE 206D616A6F72202879-
    72 000000B7 206F72206E293F3A20-
    72 000000C0 2563200A00         
    73 000000C5 416C72696768742E20-     elec1 db "Alright.  Now we will work on your electricity.", 10,0
    73 000000CE 204E6F772077652077-
    73 000000D7 696C6C20776F726B20-
    73 000000E0 6F6E20796F75722065-
    73 000000E9 6C6563747269636974-
    73 000000F2 792E0A00           
    74 000000F6 506C6561736520656E-     res1 db "Please enter the resistance of circuit #1 in ohms: %5.3lf", 10,0
    74 000000FF 746572207468652072-
    74 00000108 6573697374616E6365-
    74 00000111 206F66206369726375-
    74 0000011A 697420233120696E20-
    74 00000123 6F686D733A2025352E-
    74 0000012C 336C660A00         
    75 00000131 576861742069732074-     res2 db "What is the resistance of circuit #2 in ohms: %5.3lf", 10,0
    75 0000013A 686520726573697374-
    75 00000143 616E6365206F662063-
    75 0000014C 697263756974202332-
    75 00000155 20696E206F686D733A-
    75 0000015E 2025352E336C660A00 
    76 00000167 54686520746F74616C-     res3 db "The total resistance is %5.3lf Ohms.", 10,0 
    76 00000170 20726573697374616E-
    76 00000179 63652069732025352E-
    76 00000182 336C66204F686D732E-
    76 0000018B 0A00               
    77 0000018D 5468616E6B20796F75-     thanks db "Thank you. Please follow the exit signs to the front desk.", 10,0
    77 00000196 2E20506C6561736520-
    77 0000019F 666F6C6C6F77207468-
    77 000001A8 652065786974207369-
    77 000001B1 676E7320746F207468-
    77 000001BA 652066726F6E742064-
    77 000001C3 65736B2E0A00       
    78                                  
    79 000001C9 256C6600                resans1 db "%lf",0 ;answer to res1
    80 000001CD 256C6600                resans2 db "%lf",0 ;answer to res2
    81                                  
    82 000001D1 257300                  compyq db "%s",0 ;answer to the computer science major question
    83 000001D4 257300                  chrisq db "%s",0 ;answer to the Chris Sawyer question
    84 000001D7 257300                  stringformat db "%s", 0
    85                                  
    86 000001DA 48E17A140E7CF540        compscisal dq 88000.88
    87 000001E2 0000000080842E41        chrissal dq 1000000.00
    88 000001EA 14AE47E17AC09240        socialsal dq 1200.12
    89 000001F2 000000000000F03F        one1 dq 1.0
    90                                  
    91                                  segment .bss
    92                                  
    93                                  
    94                                  segment .text
    95                                  
    96                                  interview:
    97                                  ;Backup registers
    98                                  
    99 00000000 55                      push rbp
   100 00000001 4889E5                  mov rbp, rsp
   101 00000004 57                      push rdi
   102 00000005 56                      push rsi
   103 00000006 52                      push rdx
   104 00000007 51                      push rcx
   105 00000008 4150                    push r8
   106 0000000A 4151                    push r9
   107 0000000C 4152                    push r10
   108 0000000E 4153                    push r11
   109 00000010 4154                    push r12
   110 00000012 4155                    push r13
   111 00000014 4156                    push r14
   112 00000016 4157                    push r15
   113 00000018 53                      push rbx
   114 00000019 9C                      pushf
   115                                  
   116 0000001A 6AFF                    push qword -1
   117                                  
   118                                   ;Move values from cpp to stack
   119 0000001C 4989FF                   mov r15, rdi ;string Name
   120 0000001F F2440F10F8               movsd xmm15, xmm0 ;double Salary
   121                                  
   122                                  ;Print "Hello __ I am Ms Fenster. The Interview will begin" message
   123 00000024 6A00                    push qword 0
   124 00000026 B800000000              mov qword rax,0
   125 0000002B 48BF-                   mov qword rdi, info
   125 0000002D [0000000000000000] 
   126 00000035 4C89FE                  mov qword rsi, r15
   127 00000038 E8(00000000)            call printf
   128 0000003D 58                      pop rax
   129                                  
   130                                  
   131                                  ;Print "wow that's a lot of cash!" with salary
   132 0000003E 6A00                    push qword 0
   133 00000040 B801000000              mov rax, 1
   134 00000045 48BF-                   mov rdi, salary
   134 00000047 [3A00000000000000] 
   135 0000004F F2410F10C7              movsd xmm0, xmm15
   136 00000054 E8(00000000)            call printf 
   137 00000059 58                      pop rax
   138                                  
   139                                  ;Print "Are you Chris Sawyer?" 
   140 0000005A 48BF-                   mov rdi, who
   140 0000005C [5D00000000000000] 
   141 00000064 B800000000              mov qword rax, 0
   142 00000069 E8(00000000)            call printf
   143 0000006E 58                      pop rax
   144                                  
   145                                  ;Answer the Chris Sawyer Question
   146 0000006F B800000000              mov rax, 0
   147 00000074 48BF-                   mov rdi, chrisq  ;%s
   147 00000076 [D401000000000000] 
   148 0000007E 4889E6                  mov rsi, rsp
   149 00000081 E8(00000000)            call scanf
   150                                  
   151                                  ;Compare if answer is 'y' or 'n'
   152 00000086 41BE79000000            mov r14, 'y'
   153 0000008C 4C393424                cmp [rsp], r14
   154 00000090 7402                    je chris_yes
   155 00000092 750F                    jne chris_no
   156                                  
   157                                  ;If yes to Chris Sawyer
   158                                  chris_yes:
   159 00000094 F2440F103C25-           movsd xmm15, [chrissal]
   159 0000009A [E2010000]         
   160 0000009E E92A010000              jmp final
   161                                  
   162                                  ;If no to Chris Sawyer
   163                                  chris_no:
   164 000000A3 EB00                    jmp electricity
   165                                  
   166                                  
   167                                  ;===BEGIN ELECTRICITY TEST===
   168                                  electricity: 
   169                                  ;Print Message that begins the Electricity Test
   170 000000A5 48BF-                   mov rdi, elec1
   170 000000A7 [C500000000000000] 
   171 000000AF B800000000              mov qword rax,0
   172 000000B4 E8(00000000)            call printf 
   173                                  
   174                                  ;Print Question 1
   175 000000B9 48BF-                   mov rdi, res1
   175 000000BB [F600000000000000] 
   176 000000C3 B800000000              mov qword rax, 0 
   177 000000C8 E8(00000000)            call printf 
   178                                  
   179                                  ;Accept Answer for Q1
   180 000000CD B800000000              mov rax,0
   181 000000D2 48BF-                   mov rdi, resans1  ;%lf
   181 000000D4 [C901000000000000] 
   182 000000DC 4889E6                  mov rsi,rsp
   183 000000DF E8(00000000)            call scanf
   184 000000E4 F2440F101424            movsd xmm10,[rsp]
   185                                  
   186                                  ;Print Question 2
   187 000000EA 48BF-                   mov rdi, res2
   187 000000EC [3101000000000000] 
   188 000000F4 B800000000              mov qword rax, 0 
   189 000000F9 E8(00000000)            call printf 
   190                                  
   191                                  ;Accept Answer for Q2
   192 000000FE B800000000              mov rax,0
   193 00000103 48BF-                   mov rdi, resans2 ;%lf
   193 00000105 [CD01000000000000] 
   194 0000010D 4889E6                  mov rsi, rsp
   195 00000110 E8(00000000)            call scanf
   196 00000115 F2440F101C24            movsd xmm11, [rsp]
   197                                  
   198                                  ;Calculate Total Resistance
   199 0000011B B800000000              mov rax, 0
   200 00000120 F2450F10E2              movsd xmm12, xmm10
   201 00000125 F20F100C25-             movsd xmm1, [one1]
   201 0000012A [F2010000]         
   202 0000012E F2410F5ECC              divsd xmm1, xmm12 ;1/resans1 
   203 00000133 F2440F10E1              movsd xmm12, xmm1
   204 00000138 F20F101425-             movsd xmm2,[one1]
   204 0000013D [F2010000]         
   205 00000141 F2450F10EB              movsd xmm13, xmm11
   206 00000146 F2410F5ED5              divsd xmm2, xmm13 ;1/resans2
   207 0000014B F2440F10EA              movsd xmm13, xmm2
   208 00000150 F2450F58EC              addsd xmm13,xmm12
   209 00000155 F20F101C25-             movsd xmm3,[one1]
   209 0000015A [F2010000]         
   210 0000015E F2410F5EDD              divsd xmm3, xmm13 ; 1/(1/r1 + 1/r2) = total resistance
   211 00000163 F2440F10EB              movsd xmm13, xmm3 ;the Total resistance
   212                                  
   213                                  ;Print Total Resistance 
   214 00000168 B801000000              mov rax,1
   215 0000016D 48BF-                   mov rdi, res3
   215 0000016F [6701000000000000] 
   216 00000177 F2410F10C5              movsd xmm0, xmm13
   217 0000017C E8(00000000)            call printf
   218                                  
   219                                  ;== Are you a Computer Science Major Block ==
   220                                  major:
   221                                  ;Print Computer Science Major Question
   222 00000181 B800000000              mov rax, 0
   223 00000186 48BF-                   mov rdi, compy
   223 00000188 [9300000000000000] 
   224 00000190 E8(00000000)            call printf
   225                                  
   226                                  ;Accept answer to the CS Major Question
   227 00000195 B801000000              mov rax, 1
   228 0000019A 48BF-                   mov rdi, compyq ;%s
   228 0000019C [D101000000000000] 
   229 000001A4 4889E6                  mov rsi, rsp
   230 000001A7 E8(00000000)            call scanf
   231                                  
   232                                  ;Compare if answer is 'y' or 'n'
   233 000001AC 41BD79000000            mov r13, 'y'
   234 000001B2 4C39E8                  cmp rax, r13
   235 000001B5 740C                    je cs_major
   236                                  
   237                                  ;If no to Computer Science major
   238                                  ;cs_no:
   239 000001B7 F2440F103C25-           movsd xmm15, [socialsal]
   239 000001BD [EA010000]         
   240 000001C1 EB0A                    jmp final
   241                                  
   242                                  ;If yes to Computer science major
   243                                  cs_major:
   244 000001C3 F2440F103C25-           movsd xmm15, [compscisal]
   244 000001C9 [DA010000]         
   245                                  ;jmp final
   246                                  
   247                                  
   248                                  
   249                                  
   250                                  ; == FINAL prints a final message and sends a code to the main.cpp == 
   251                                  final: 
   252                                  ;Thank you message
   253 000001CD 6A00                    push qword 0
   254 000001CF B800000000              mov rax, 0
   255 000001D4 48BF-                   mov rdi, thanks
   255 000001D6 [8D01000000000000] 
   256                                  
   257 000001DE E8(00000000)            call printf
   258 000001E3 58                       pop rax
   259 000001E4 F2410F10C7               movsd xmm0,xmm15 ;Sends a code to the main.cpp 
   260 000001E9 9D                       popf                                                 
   261 000001EA 5B                       pop rbx                                                     
   262 000001EB 415F                     pop r15                                                     
   263 000001ED 415E                     pop r14                                                      
   264 000001EF 415D                     pop r13                                                      
   265 000001F1 415C                     pop r12                                                      
   266 000001F3 415B                     pop r11                                                     
   267 000001F5 415A                     pop r10                                                     
   268 000001F7 4159                     pop r9                                                      
   269 000001F9 4158                     pop r8                                                      
   270 000001FB 59                       pop rcx                                                     
   271 000001FC 5A                       pop rdx                                                     
   272 000001FD 5E                       pop rsi                                                     
   273 000001FE 5F                       pop rdi                                                     
   274 000001FF 5D                       pop rbp
   275                                  
   276 00000200 C3                      ret
